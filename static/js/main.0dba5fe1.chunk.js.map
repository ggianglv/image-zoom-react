{"version":3,"sources":["components/ReactZoom.js","App.js","serviceWorker.js","index.js"],"names":["ON_TYPES","preventBehavior","e","cancelable","preventDefault","ReactZoom","props","src","zoomSrc","duration","magnify","on","onImageLoaded","onZoomIn","onZoomOut","alt","touch","_useState","useState","left","top","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","isZoom","setIsZoom","imageRef","useRef","useEffect","current","useLayoutEffect","image","document","createElement","onload","objectSpread","width","clientWidth","height","clientHeight","zoom","pos","isTouch","arguments","length","undefined","rect","target","getBoundingClientRect","clientX","targetTouches","clientY","x","y","Math","max","console","log","getPos","originWidth","originHeight","concat","react_default","a","className","style","cursor","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","onMouseMove","onTouchStart","window","addEventListener","passive","onTouchMove","onTouchEnd","removeEventListener","ref","transition","opacity","defaultProps","memo","Wrapper","styled","div","_templateObject","Options","_templateObject2","Option","_templateObject3","CustomLabel","_templateObject4","CustomSelect","select","_templateObject5","App","setOn","setMagnify","components_ReactZoom","key","onChange","value","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0dba5fe1.chunk.js","sourcesContent":["import React, { useState, useLayoutEffect, useRef, memo, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport './zoom.css'\n\nconst ON_TYPES = {\n  mouseover: 'mouseover',\n  grab: 'grab',\n}\n\nconst preventBehavior = (e) => {\n  if (e.cancelable) {\n    e.preventDefault()\n  }\n}\n\nconst ReactZoom = (props) => {\n  const {\n    src,\n    zoomSrc,\n    duration,\n    magnify,\n    on,\n    onImageLoaded,\n    onZoomIn,\n    onZoomOut,\n    alt,\n    touch,\n  } = props\n  const [data, setData] = useState({\n    left: 0,\n    top: 0,\n  })\n  const [isZoom, setIsZoom] = useState(false)\n  const imageRef = useRef(null)\n\n  useEffect(() => {\n    if (isZoom) {\n      onZoomIn(imageRef.current)\n    } else {\n      onZoomOut(imageRef.current)\n    }\n  }, [isZoom])\n\n  useLayoutEffect(() => {\n    const image = document.createElement('img')\n    image.onload = () => {\n      setData({\n        ...data,\n        width: imageRef.current.clientWidth * magnify,\n        height: imageRef.current.clientHeight * magnify,\n      })\n      onImageLoaded(imageRef.current)\n    }\n    image.src = src\n  }, [])\n\n  const getPos = (e, isTouch = false) => {\n    const rect = e.target.getBoundingClientRect()\n    const clientX = isTouch ? e.targetTouches[0].clientX : e.clientX\n    const clientY = isTouch ? e.targetTouches[0].clientY : e.clientY\n\n    let x = clientX - rect.left\n    let y = clientY - rect.top\n    x = Math.max(0, x)\n    y = Math.max(0, y)\n    console.log(y)\n    return { x, y }\n  }\n\n  const zoom = (e, isTouch = false) => {\n    const pos = getPos(e, isTouch)\n    const originWidth = data.width / magnify\n    const originHeight = data.height / magnify\n    const left = (pos.x / originWidth) * (originWidth - data.width)\n    const top = (pos.y / originHeight) * (originHeight - data.height)\n    setData({\n      ...data,\n      left: `${left}px`,\n      top: `${top}px`,\n    })\n  }\n\n  const onMouseMove = (e) => {\n    if (!isZoom) {\n      return\n    }\n    zoom(e)\n  }\n\n  const onMouseEnter = () => {\n    if (on === ON_TYPES.mouseover) {\n      setIsZoom(true)\n    }\n  }\n\n  const onMouseLeave = () => {\n    setIsZoom(false)\n  }\n\n  const onMouseDown = (e) => {\n    if (on === ON_TYPES.grab) {\n      setIsZoom(true)\n      zoom(e)\n    }\n  }\n\n  const onMouseUp = () => {\n    if (on === ON_TYPES.grab) {\n      setIsZoom(false)\n    }\n  }\n\n  const onTouchStart = (e) => {\n    if (!touch) {\n      return\n    }\n    window.addEventListener('touchmove', preventBehavior, { passive: false })\n    setIsZoom(true)\n    zoom(e, true)\n  }\n\n  const onTouchMove = (e) => {\n    if (!touch) {\n      return\n    }\n\n    zoom(e, true)\n  }\n\n  const onTouchEnd = () => {\n    if (!touch) {\n      return\n    }\n    window.removeEventListener('touchmove', preventBehavior)\n\n    setIsZoom(false)\n  }\n\n  return (\n    <div\n      className=\"react-zoom-wrapper\"\n      style={{\n        cursor: on === ON_TYPES.grab && isZoom ? 'grab' : 'default',\n      }}\n      onMouseDown={onMouseDown}\n      onMouseUp={onMouseUp}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onMouseMove={onMouseMove}\n      onTouchStart={onTouchStart}\n      onTouchMove={onTouchMove}\n      onTouchEnd={onTouchEnd}\n    >\n      <img\n        ref={imageRef}\n        alt={alt}\n        className=\"react-zoom-origin-image\"\n        src={src}\n      />\n      {!!data.width && (\n        <img\n          className=\"react-zoom-image\"\n          style={{\n            width: `${data.width}px`,\n            height: `${data.height}px`,\n            left: data.left,\n            top: data.top,\n            transition: `opacity ${duration}ms ease-in-out`,\n            opacity: +isZoom,\n          }}\n          alt={alt}\n          src={zoomSrc || src}\n        />\n      )}\n    </div>\n  )\n}\n\nReactZoom.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string,\n  zoomSrc: PropTypes.string,\n  touch: PropTypes.bool,\n  on: PropTypes.string,\n  duration: PropTypes.number,\n  magnify: PropTypes.number,\n  onImageLoaded: PropTypes.func,\n  onZoomIn: PropTypes.func,\n  onZoomOut: PropTypes.func,\n}\n\nReactZoom.defaultProps = {\n  zoomSrc: '',\n  touch: true,\n  alt: 'zoom',\n  on: ON_TYPES.mouseover,\n  magnify: 2,\n  duration: 200,\n  onImageLoaded: () => {},\n  onZoomIn: () => {},\n  onZoomOut: () => {},\n}\n\nexport default memo(ReactZoom)\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport ReactZoom from './components/ReactZoom'\nimport './App.css'\n\nconst Wrapper = styled.div`\n  width: 500px;\n  margin: 0 auto;\n`\n\nconst Options = styled.div`\n  display: flex;\n  margin-top: 10px;\n`\nconst Option = styled.div`\n  display: flex;\n  font-size: 14px;\n  margin-right: 10px;\n`\n\nconst CustomLabel = styled.div`\n  margin-right: 4px;\n`\n\nconst CustomSelect = styled.select`\n  \n`\n\nconst App = () => {\n  const [on, setOn] = useState('mouseover')\n  const [magnify, setMagnify] = useState(1.5)\n\n  const onOnChange = (e) => {\n    setOn(e.target.value)\n  }\n\n  const onMagnifyChange = (e) => {\n    setMagnify(+e.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <ReactZoom\n          key={magnify} // trigger remount when change magnify\n          on={on}\n          magnify={magnify}\n          src='http://www.jacklmoore.com/img/daisy.jpg'\n        />\n\n        <Options>\n          <Option>\n            <CustomLabel>\n              on\n            </CustomLabel>\n            <CustomSelect onChange={onOnChange} value={on}>\n              <option value=\"mouseover\">mouseover</option>\n              <option value=\"grab\">grab</option>\n            </CustomSelect>\n          </Option>\n\n          <Option>\n            <CustomLabel>\n              magnify\n            </CustomLabel>\n            <CustomSelect onChange={onMagnifyChange} value={magnify}>\n              <option value=\"1.5\">1.5</option>\n              <option value=\"2\">2</option>\n              <option value=\"2.5\">2.5</option>\n              <option value=\"3\">3</option>\n            </CustomSelect>\n          </Option>\n        </Options>\n      </Wrapper>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}