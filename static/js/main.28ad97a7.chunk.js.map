{"version":3,"sources":["components/ReactZoom.js","App.js","serviceWorker.js","index.js"],"names":["ReactZoom","props","url","zoomUrl","duration","magnify","alt","on","onImageLoaded","onZoomIn","onZoomOut","_useState","useState","left","top","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","isZoom","setIsZoom","imageRef","useRef","useLayoutEffect","objectSpread","width","current","clientWidth","height","clientHeight","react_default","a","createElement","style","border","display","position","overflow","onMouseEnter","onMouseLeave","onMouseMove","e","pos","rect","target","getBoundingClientRect","x","clientX","document","body","scrollLeft","y","clientY","scrollTop","getPos","concat","ref","pointerEvents","src","transition","opacity","defaultProps","Wrapper","styled","div","_templateObject","App","components_ReactZoom","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOASMA,EAAY,SAACC,GAAU,IAEzBC,EASED,EATFC,IACAC,EAQEF,EARFE,QACAC,EAOEH,EAPFG,SACAC,EAMEJ,EANFI,QAKAC,GACEL,EALFM,GAKEN,EAJFO,cAIEP,EAHFQ,SAGER,EAFFS,UAEET,EADFK,KAVyBK,EAYHC,mBAAS,CAC/BC,KAAM,EACNC,IAAK,IAdoBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GAYpBO,EAZoBH,EAAA,GAYdI,EAZcJ,EAAA,GAAAK,EAgBCR,oBAAS,GAhBVS,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAgBpBE,EAhBoBD,EAAA,GAgBZE,EAhBYF,EAAA,GAiBrBG,EAAWC,iBAAO,MAExBC,0BAAgB,WACdP,EAAQH,OAAAW,EAAA,EAAAX,CAAA,GACHE,EADE,CAELU,MAAOJ,EAASK,QAAQC,YAAczB,EACtC0B,OAAQP,EAASK,QAAQG,aAAe3B,MAEzC,IA2BH,OACE4B,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLC,OAAQ,EACRC,QAAS,eACTC,SAAU,WACVC,SAAU,UAEZC,aAhBiB,WACnBlB,GAAU,IAgBRmB,aAbiB,WACnBnB,GAAU,IAaRoB,YA3BgB,SAACC,GACnB,IAAMC,EATO,SAACD,GACd,IAAME,EAAOF,EAAEG,OAAOC,wBACtB,MAAO,CACLC,EAAGL,EAAEM,SAAWJ,EAAKjC,KAAOsC,SAASC,KAAKC,YAC1CC,EAAGV,EAAEW,SAAWT,EAAKhC,IAAMqC,SAASC,KAAKI,YAK/BC,CAAOb,GACnBzB,EAAQH,OAAAW,EAAA,EAAAX,CAAA,GACHE,EADE,CAELL,KAAI,IAAA6C,OAAMb,EAAII,EAAV,MACJnC,IAAG,IAAA4C,OAAMb,EAAIS,EAAV,WAwBHrB,EAAAC,EAAAC,cAAA,OACEwB,IAAKnC,EAAUlB,IAAKA,EACpB8B,MAAO,CACLwB,cAAe,QAEjBC,IAAK3D,IAENgB,EAAKU,OACJK,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLwB,cAAe,OACfhC,MAAK,GAAA8B,OAAKxC,EAAKU,MAAV,MACLG,OAAM,GAAA2B,OAAKxC,EAAKa,OAAV,MACNQ,SAAU,WACV1B,KAAMK,EAAKL,KACXC,IAAKI,EAAKJ,IACVgD,WAAU,WAAAJ,OAAatD,EAAb,kBACV2D,SAAUzC,GAEZhB,IAAI,aACJuD,IAAK1D,GAAWD,MAmB1BF,EAAUgE,aAAe,CACvB7D,QAAS,GACTG,IAAK,QACLC,GA/GW,YAgHXF,QAAS,EACTD,SAAU,IACVI,cAAe,aACfC,SAAU,aACVC,UAAW,cAGEV,gGCvHf,IAAMiE,EAAUC,IAAOC,IAAVC,KAYEC,EARH,WACV,OACEpC,EAAAC,EAAAC,cAAC8B,EAAD,KACEhC,EAAAC,EAAAC,cAACmC,EAAD,CAAWpE,IAAI,qDCCDqE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAAS3B,SAAS4B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.28ad97a7.chunk.js","sourcesContent":["import React, { useState, useLayoutEffect, useRef, useMemo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst ON_TYPES = {\n  mouseover: 'mouseover',\n  grab: 'grab',\n  click: 'click',\n}\n\nconst ReactZoom = (props) => {\n  const {\n    url,\n    zoomUrl,\n    duration,\n    magnify,\n    on,\n    onImageLoaded,\n    onZoomIn,\n    onZoomOut,\n    alt\n  } = props\n  const [data, setData] = useState({\n    left: 0,\n    top: 0,\n  })\n  const [isZoom, setIsZoom] = useState(false)\n  const imageRef = useRef(null)\n\n  useLayoutEffect(() => {\n    setData({\n      ...data,\n      width: imageRef.current.clientWidth * magnify,\n      height: imageRef.current.clientHeight * magnify,\n    })\n  }, [])\n\n  const getPos = (e) => {\n    const rect = e.target.getBoundingClientRect()\n    return {\n      x: e.clientX - (rect.left + document.body.scrollLeft),\n      y: e.clientY - (rect.top + document.body.scrollTop),\n    }\n  }\n\n  const onMouseMove = (e) => {\n    const pos = getPos(e)\n    setData({\n      ...data,\n      left: `-${pos.x}px`,\n      top: `-${pos.y}px`,\n    })\n  }\n\n  const onMouseEnter = () => {\n    setIsZoom(true)\n  }\n\n  const onMouseLeave = () => {\n    setIsZoom(false)\n  }\n\n  return (\n    <div\n      style={{\n        border: 0,\n        display: 'inline-block',\n        position: 'relative',\n        overflow: 'hidden',\n      }}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      onMouseMove={onMouseMove}\n    >\n      <img\n        ref={imageRef} alt={alt}\n        style={{\n          pointerEvents: 'none',\n        }}\n        src={url}\n      />\n      {data.width && (\n        <img\n          style={{\n            pointerEvents: 'none',\n            width: `${data.width}px`,\n            height: `${data.height}px`,\n            position: 'absolute',\n            left: data.left,\n            top: data.top,\n            transition: `opacity ${duration}ms ease-in-out`,\n            opacity: +isZoom,\n          }}\n          alt=\"image zoom\"\n          src={zoomUrl || url}\n        />\n      )}\n    </div>\n  )\n}\n\nReactZoom.propTypes = {\n  url: PropTypes.string.isRequired,\n  alt: PropTypes.string,\n  zoomUrl: PropTypes.string,\n  on: PropTypes.string,\n  duration: PropTypes.number,\n  magnify: PropTypes.number,\n  onImageLoaded: PropTypes.func,\n  onZoomIn: PropTypes.func,\n  onZoomOut: PropTypes.func,\n}\n\nReactZoom.defaultProps = {\n  zoomUrl: '',\n  alt: 'image',\n  on: ON_TYPES.mouseover,\n  magnify: 2,\n  duration: 200,\n  onImageLoaded: () => {},\n  onZoomIn: () => {},\n  onZoomOut: () => {},\n}\n\nexport default ReactZoom\n","import React from 'react'\nimport styled from 'styled-components'\nimport ReactZoom from './components/ReactZoom'\n\nconst Wrapper = styled.div`\n  width: 555px;\n`\n\nconst App = () => {\n  return (\n    <Wrapper>\n      <ReactZoom url='https://www.w3schools.com/howto/img_forest.jpg' />\n    </Wrapper>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}